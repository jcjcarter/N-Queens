For part 1 parallel implementation, I used the recursive algorithm for the method search.
I placed an async around the recursive for parallelSearch to allow multiple cores
to  work on other possible placements on the board in parallel. To ensure that they are not
any data races, I placed an isolated construct around problem.addSolution which allows the
processors to work in mutual execlusion.

For part 2 sequential, I use the same search method that was provided in the skeletion but 
I have a global variable that keeps track of the lowest computed cost. The first score computed is 
used as the cutoff and will only be replaced if a lower cost score is found. For the parallel version,
it has the same code as the sequential but there is an async around the recursive call and there is an
isolated around problem.addSolution which allows the processors to work in mutual execlusion.
Part 1:

1 Worker:
NQueens
Time = 1.86 sec
Sequential: Number of solutions is:14200

Time = 1.74 sec
Parallel: Number of solutions is:14200

	   20.86 sequential Sudoku
	   22.25 parallel Sudoku

2 Workers:
NQueens
Time = 1.87 sec
Sequential: Number of solutions is:14200

Time = 1.7 sec
Parallel: Number of solutions is:14200

	  20.72 sec sequential Sudoku
	  22.19 sec parallel Sudoku

4 Workers:
NQueens
Time = 1.87 sec
Sequential: Number of solutions is:14200

Time = .94 sec
Parallel: Number of solutions is:14200

	   20.86 sec Sudoku sequential
	   17.86 sec parallel Sudoku

8 Workers:
NQUEENS:
Time = .69 sec
Sequential: Number of solutions is:14200

Time = 1.13 sec
Parallel: Number of solutions is:14200

	   20.75 sec sequential Sudoku
	   13.54 sec parallel Sudoku
Part 2:

1 Worker:

Time = 0.78 sec
Sequential Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

Time = 5.36 sec
Parallel Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

2 Workers:

Time = 0.77 sec
Sequential Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

Time = 5.31 sec
Parallel Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

4 Workers:

Time = 0.76 sec
Sequential Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

Time = 10.39 sec
Parallel Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

8 Workers:

Time = 0.77 sec
Sequential Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7

Time = 2.17 sec
Parallel Sudoku: Best solution is
* State:
 1 6 8 3 2 5 4 7 9
 5 3 4 9 7 6 1 2 8
 2 7 9 1 4 8 6 5 3
 7 8 3 5 6 2 9 1 4
 9 4 5 7 1 3 2 8 6
 6 2 1 8 9 4 7 3 5
 4 5 6 2 8 7 3 9 1
 8 1 7 6 3 9 5 4 2
 3 9 2 4 5 1 8 6 7
